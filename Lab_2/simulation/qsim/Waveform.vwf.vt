// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2021 11:50:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test_blink_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_blink_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50;
reg reset_btn;
reg treg_scl;
reg treg_sda;
// wires                                               
wire led;
wire scl;
wire sda;

// assign statements (if any)                          
assign scl = treg_scl;
assign sda = treg_sda;
test_blink_top i1 (
// port map - connection between master ports and signals/registers   
	.clk_50(clk_50),
	.led(led),
	.reset_btn(reset_btn),
	.scl(scl),
	.sda(sda)
);
initial 
begin 
#10000000 $finish;
end 

// clk_50
always
begin
	clk_50 = 1'b0;
	clk_50 = #10000 1'b1;
	#10000;
end 

// reset_btn
initial
begin
	reset_btn = 1'b0;
	reset_btn = #640000 1'b1;
	reset_btn = #6240000 1'b0;
end 

// scl
initial
begin
	treg_scl = 1'bZ;
end 

// sda
initial
begin
	treg_sda = 1'bZ;
end 
endmodule

