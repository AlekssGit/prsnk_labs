
nios_intrpt.elf:     file format elf32-littlenios2
nios_intrpt.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008140

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000710 memsz 0x00000710 flags r-x
    LOAD off    0x00001730 vaddr 0x00008730 paddr 0x00008738 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001740 vaddr 0x00008740 paddr 0x00008740 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000005d8  00008140  00008140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00008718  00008718  00001718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00008730  00008738  00001730  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00008740  00008740  00001740  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000002b8  00000000  00000000  00001760  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000397  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000172d  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c21  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002710  00000000  00000000  000040fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000032c  00000000  00000000  00006810  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000008cd  00000000  00000000  00006b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000057f  00000000  00000000  00007409  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00007988  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000079c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00008b5b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00008b5e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008b6a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008b6b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00008b6c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00008b77  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00008b82  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00008b8d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000044  00000000  00000000  00008b9b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000312c8  00000000  00000000  00008bdf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008140 l    d  .text	00000000 .text
00008718 l    d  .rodata	00000000 .rodata
00008730 l    d  .rwdata	00000000 .rwdata
00008740 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0000817c l     F .text	00000024 handle_btn_irq
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000838c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008594 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00008418 g     F .text	0000002c alt_main
00008758 g     O .bss	00000100 alt_irq
00008738 g       *ABS*	00000000 __flash_rwdata_start
00008444 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008740 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008750 g     O .bss	00000004 alt_argv
00010730 g       *ABS*	00000000 _gp
0000847c g     F .text	00000004 usleep
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000086d0 g     F .text	00000008 __udivsi3
00008858 g       *ABS*	00000000 __bss_end
00008320 g     F .text	0000006c alt_iic_isr_register
00008284 g     F .text	00000018 alt_ic_irq_enabled
00008748 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	00000054 alt_irq_handler
00008564 g     F .text	00000004 alt_dcache_flush_all
00008738 g       *ABS*	00000000 __ram_rwdata_end
00008730 g       *ABS*	00000000 __ram_rodata_end
00008734 g     O .rwdata	00000004 jtag_uart_0
000086d8 g     F .text	00000008 __umodsi3
00008858 g       *ABS*	00000000 end
000081a0 g     F .text	0000004c init_pio
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
000084a4 g     F .text	00000034 altera_avalon_jtag_uart_write
00008140 g     F .text	0000003c _start
00008480 g     F .text	00000004 alt_sys_init
000086e0 g     F .text	00000038 __mulsi3
00008730 g       *ABS*	00000000 __ram_rwdata_start
00008718 g       *ABS*	00000000 __ram_rodata_start
000084d8 g     F .text	0000008c alt_busy_sleep
00008858 g       *ABS*	00000000 __alt_stack_base
00008740 g       *ABS*	00000000 __bss_start
000081ec g     F .text	00000098 main
00008754 g     O .bss	00000004 alt_envp
00008610 g     F .text	00000060 __divsi3
00008718 g       *ABS*	00000000 __flash_rodata_start
00008484 g     F .text	00000020 alt_irq_init
00008744 g     O .bss	00000004 flag_irq
0000874c g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000831c g     F .text	00000004 alt_ic_isr_register
00008738 g       *ABS*	00000000 _edata
00008858 g       *ABS*	00000000 _end
00008140 g       *ABS*	00000000 __ram_exceptions_end
000082dc g     F .text	00000040 alt_ic_irq_disable
0000856c g     F .text	00000008 altera_nios2_qsys_irq_init
0000800c g       .entry	00000000 exit
00008670 g     F .text	00000060 __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000800c g       .entry	00000000 _exit
00008574 g     F .text	00000020 strlen
00008568 g     F .text	00000004 alt_icache_flush_all
00008730 g     O .rwdata	00000004 alt_priority_mask
0000829c g     F .text	00000040 alt_ic_irq_enable
000083ac g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08605014 	ori	at,at,33088
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	deffff04 	addi	sp,sp,-4
    80f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80f4:	0009313a 	rdctl	r4,ipending
    80f8:	00c00044 	movi	r3,1
    80fc:	01400074 	movhi	r5,1
    8100:	2961d604 	addi	r5,r5,-30888
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    810c:	10000726 	beq	r2,zero,812c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8110:	29000117 	ldw	r4,4(r5)
    8114:	28800017 	ldw	r2,0(r5)
    8118:	103ee83a 	callr	r2
    811c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    8120:	10000426 	beq	r2,zero,8134 <alt_irq_handler+0x48>
    8124:	1009883a 	mov	r4,r2
    8128:	003ff306 	br	80f8 <alt_irq_handler+0xc>
    812c:	29400204 	addi	r5,r5,8
    8130:	003ff406 	br	8104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8134:	dfc00017 	ldw	ra,0(sp)
    8138:	dec00104 	addi	sp,sp,4
    813c:	f800283a 	ret

Disassembly of section .text:

00008140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8140:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8144:	def38814 	ori	sp,sp,52768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8148:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    814c:	d681cc14 	ori	gp,gp,1840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8154:	10a1d014 	ori	r2,r2,34624

    movhi r3, %hi(__bss_end)
    8158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    815c:	18e21614 	ori	r3,r3,34904

    beq r2, r3, 1f
    8160:	10c00326 	beq	r2,r3,8170 <_start+0x30>

0:
    stw zero, (r2)
    8164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    816c:	10fffd36 	bltu	r2,r3,8164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8170:	00083ac0 	call	83ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8174:	00084180 	call	8418 <alt_main>

00008178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8178:	003fff06 	br	8178 <alt_after_alt_main>

0000817c <handle_btn_irq>:
#else
static void handle_btn_irq (void* context, alt_u32 id)
#endif
{
	volatile int* edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr += 1;
    817c:	20800017 	ldw	r2,0(r4)
    8180:	00c00044 	movi	r3,1
    8184:	10c5883a 	add	r2,r2,r3
    8188:	20800015 	stw	r2,0(r4)
	flag_irq = 1;
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0); //reset irq flag
    818c:	00800074 	movhi	r2,1
    8190:	10840704 	addi	r2,r2,4124
static void handle_btn_irq (void* context, alt_u32 id)
#endif
{
	volatile int* edge_capture_ptr = (volatile int*) context;
	*edge_capture_ptr += 1;
	flag_irq = 1;
    8194:	d0e00515 	stw	r3,-32748(gp)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0); //reset irq flag
    8198:	10000035 	stwio	zero,0(r2)
}
    819c:	f800283a 	ret

000081a0 <init_pio>:

void init_pio()
{
    81a0:	defffe04 	addi	sp,sp,-8
	void* edge_capture_ptr = (void*) &edge_capture;

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0x1);	//enable irq
    81a4:	00800044 	movi	r2,1
    81a8:	00c00074 	movhi	r3,1
    81ac:	18c40604 	addi	r3,r3,4120
	flag_irq = 1;
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0); //reset irq flag
}

void init_pio()
{
    81b0:	dfc00115 	stw	ra,4(sp)
	void* edge_capture_ptr = (void*) &edge_capture;

	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_1_BASE, 0x1);	//enable irq
    81b4:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_1_BASE, 0);		//reset irq flag
    81b8:	00800074 	movhi	r2,1
    81bc:	10840704 	addi	r2,r2,4124
    81c0:	10000035 	stwio	zero,0(r2)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register (PIO_1_IRQ_INTERRUPT_CONTROLLER_ID, PIO_1_IRQ, handle_btn_irq, edge_capture_ptr, 0x0);
    81c4:	0009883a 	mov	r4,zero
    81c8:	000b883a 	mov	r5,zero
    81cc:	01800074 	movhi	r6,1
    81d0:	31a05f04 	addi	r6,r6,-32388
    81d4:	d1e00404 	addi	r7,gp,-32752
    81d8:	d8000015 	stw	zero,0(sp)
    81dc:	000831c0 	call	831c <alt_ic_isr_register>
#else
	alt_irq_register (PIO_1_IRQ, edge_capture_ptr, handle_btn_interrupts);
#endif
}
    81e0:	dfc00117 	ldw	ra,4(sp)
    81e4:	dec00204 	addi	sp,sp,8
    81e8:	f800283a 	ret

000081ec <main>:

void init_pio();


int main()
{ 
    81ec:	defffd04 	addi	sp,sp,-12
    81f0:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    81f4:	01000074 	movhi	r4,1
    81f8:	2121c604 	addi	r4,r4,-30952

  init_pio();
  edge_capture = 0;
    81fc:	04000044 	movi	r16,1

void init_pio();


int main()
{ 
    8200:	dfc00215 	stw	ra,8(sp)
    8204:	dc400115 	stw	r17,4(sp)
  alt_putstr("Hello from Nios II!\n");
    8208:	00084440 	call	8444 <alt_putstr>

  init_pio();
  edge_capture = 0;
    820c:	8023883a 	mov	r17,r16

int main()
{ 
  alt_putstr("Hello from Nios II!\n");

  init_pio();
    8210:	00081a00 	call	81a0 <init_pio>
  edge_capture = 0;
    8214:	d0200415 	stw	zero,-32752(gp)
  int direction = 1;
  //unsigned long long i = 0;
  /* Event loop never exits. */
  while (1)
  {
	  if(flag_irq == 1)
    8218:	d0e00517 	ldw	r3,-32748(gp)
    821c:	00800044 	movi	r2,1
    8220:	1880031e 	bne	r3,r2,8230 <main+0x44>
	  {
		  flag_irq = 0;
    8224:	d0200515 	stw	zero,-32748(gp)
		  direction = (direction) ? 0 : 1;
    8228:	8823003a 	cmpeq	r17,r17,zero
    822c:	1821883a 	mov	r16,r3
		  data_led = 1;
	  }

	  data_led = (!direction) ? data_led << 1 : data_led >> 1;
    8230:	8804c03a 	cmpne	r2,r17,zero
    8234:	1000021e 	bne	r2,zero,8240 <main+0x54>
    8238:	8421883a 	add	r16,r16,r16
    823c:	00000106 	br	8244 <main+0x58>
    8240:	8021d07a 	srai	r16,r16,1
	  data_led = (data_led > 8 || data_led == 0) ? ((direction) ? 8 : 1) : data_led;
    8244:	00c00204 	movi	r3,8
    8248:	1c000116 	blt	r3,r16,8250 <main+0x64>
    824c:	8000051e 	bne	r16,zero,8264 <main+0x78>
    8250:	8805003a 	cmpeq	r2,r17,zero
    8254:	1000021e 	bne	r2,zero,8260 <main+0x74>
    8258:	1821883a 	mov	r16,r3
    825c:	00000106 	br	8264 <main+0x78>
    8260:	04000044 	movi	r16,1

	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, ~data_led);
    8264:	0406303a 	nor	r3,zero,r16
    8268:	00800074 	movhi	r2,1
    826c:	10840004 	addi	r2,r2,4096
    8270:	10c00035 	stwio	r3,0(r2)

	  usleep(100000);
    8274:	010000b4 	movhi	r4,2
    8278:	2121a804 	addi	r4,r4,-31072
    827c:	000847c0 	call	847c <usleep>
    8280:	003fe506 	br	8218 <main+0x2c>

00008284 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8284:	000530fa 	rdctl	r2,ienable
    8288:	00c00044 	movi	r3,1
    828c:	1946983a 	sll	r3,r3,r5
    8290:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
    8294:	1004c03a 	cmpne	r2,r2,zero
    8298:	f800283a 	ret

0000829c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    829c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82a0:	00bfff84 	movi	r2,-2
    82a4:	3084703a 	and	r2,r6,r2
    82a8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    82ac:	01000074 	movhi	r4,1
    82b0:	2121d204 	addi	r4,r4,-30904
    82b4:	00c00044 	movi	r3,1
    82b8:	20800017 	ldw	r2,0(r4)
    82bc:	1946983a 	sll	r3,r3,r5
    82c0:	10c4b03a 	or	r2,r2,r3
    82c4:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    82c8:	20800017 	ldw	r2,0(r4)
    82cc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    82d0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    82d4:	0005883a 	mov	r2,zero
    82d8:	f800283a 	ret

000082dc <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    82dc:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    82e0:	00bfff84 	movi	r2,-2
    82e4:	3084703a 	and	r2,r6,r2
    82e8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    82ec:	01000074 	movhi	r4,1
    82f0:	2121d204 	addi	r4,r4,-30904
    82f4:	00ffff84 	movi	r3,-2
    82f8:	20800017 	ldw	r2,0(r4)
    82fc:	1946183a 	rol	r3,r3,r5
    8300:	10c4703a 	and	r2,r2,r3
    8304:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8308:	20800017 	ldw	r2,0(r4)
    830c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8310:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    8314:	0005883a 	mov	r2,zero
    8318:	f800283a 	ret

0000831c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    831c:	00083201 	jmpi	8320 <alt_iic_isr_register>

00008320 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8320:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8324:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8328:	dfc00115 	stw	ra,4(sp)
    832c:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8330:	00fffa84 	movi	r3,-22
    8334:	11401016 	blt	r2,r5,8378 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8338:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    833c:	00bfff84 	movi	r2,-2
    8340:	8084703a 	and	r2,r16,r2
    8344:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    8348:	280490fa 	slli	r2,r5,3
    834c:	00c00074 	movhi	r3,1
    8350:	18e1d604 	addi	r3,r3,-30888
    8354:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
    8358:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    835c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8360:	30000226 	beq	r6,zero,836c <alt_iic_isr_register+0x4c>
    8364:	000829c0 	call	829c <alt_ic_irq_enable>
    8368:	00000106 	br	8370 <alt_iic_isr_register+0x50>
    836c:	00082dc0 	call	82dc <alt_ic_irq_disable>
    8370:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8374:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    8378:	1805883a 	mov	r2,r3
    837c:	dfc00117 	ldw	ra,4(sp)
    8380:	dc000017 	ldw	r16,0(sp)
    8384:	dec00204 	addi	sp,sp,8
    8388:	f800283a 	ret

0000838c <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    838c:	2900051e 	bne	r5,r4,83a4 <alt_load_section+0x18>
    8390:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    8394:	20800017 	ldw	r2,0(r4)
    8398:	21000104 	addi	r4,r4,4
    839c:	28800015 	stw	r2,0(r5)
    83a0:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    83a4:	29bffb1e 	bne	r5,r6,8394 <alt_load_section+0x8>
    83a8:	f800283a 	ret

000083ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    83ac:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    83b0:	01000074 	movhi	r4,1
    83b4:	2121ce04 	addi	r4,r4,-30920
    83b8:	01400074 	movhi	r5,1
    83bc:	2961cc04 	addi	r5,r5,-30928
    83c0:	01800074 	movhi	r6,1
    83c4:	31a1ce04 	addi	r6,r6,-30920
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    83c8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    83cc:	000838c0 	call	838c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    83d0:	01000074 	movhi	r4,1
    83d4:	21200804 	addi	r4,r4,-32736
    83d8:	01400074 	movhi	r5,1
    83dc:	29600804 	addi	r5,r5,-32736
    83e0:	01800074 	movhi	r6,1
    83e4:	31a05004 	addi	r6,r6,-32448
    83e8:	000838c0 	call	838c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    83ec:	01000074 	movhi	r4,1
    83f0:	2121c604 	addi	r4,r4,-30952
    83f4:	01400074 	movhi	r5,1
    83f8:	2961c604 	addi	r5,r5,-30952
    83fc:	01800074 	movhi	r6,1
    8400:	31a1cc04 	addi	r6,r6,-30928
    8404:	000838c0 	call	838c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8408:	00085640 	call	8564 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    840c:	dfc00017 	ldw	ra,0(sp)
    8410:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8414:	00085681 	jmpi	8568 <alt_icache_flush_all>

00008418 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8418:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    841c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8420:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8424:	00084840 	call	8484 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8428:	00084800 	call	8480 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    842c:	d1200717 	ldw	r4,-32740(gp)
    8430:	d1600817 	ldw	r5,-32736(gp)
    8434:	d1a00917 	ldw	r6,-32732(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8438:	dfc00017 	ldw	ra,0(sp)
    843c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8440:	00081ec1 	jmpi	81ec <main>

00008444 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8444:	defffe04 	addi	sp,sp,-8
    8448:	dc000015 	stw	r16,0(sp)
    844c:	dfc00115 	stw	ra,4(sp)
    8450:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8454:	00085740 	call	8574 <strlen>
    8458:	800b883a 	mov	r5,r16
    845c:	100d883a 	mov	r6,r2
    8460:	01000074 	movhi	r4,1
    8464:	2121cd04 	addi	r4,r4,-30924
    8468:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    846c:	dfc00117 	ldw	ra,4(sp)
    8470:	dc000017 	ldw	r16,0(sp)
    8474:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8478:	00084a41 	jmpi	84a4 <altera_avalon_jtag_uart_write>

0000847c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    847c:	00084d81 	jmpi	84d8 <alt_busy_sleep>

00008480 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    8480:	f800283a 	ret

00008484 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8484:	deffff04 	addi	sp,sp,-4
    8488:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    848c:	000856c0 	call	856c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8490:	00800044 	movi	r2,1
    8494:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8498:	dfc00017 	ldw	ra,0(sp)
    849c:	dec00104 	addi	sp,sp,4
    84a0:	f800283a 	ret

000084a4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    84a4:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    84a8:	298f883a 	add	r7,r5,r6
    84ac:	20c00104 	addi	r3,r4,4
    84b0:	00000606 	br	84cc <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    84b4:	18800037 	ldwio	r2,0(r3)
    84b8:	10bfffec 	andhi	r2,r2,65535
    84bc:	10000326 	beq	r2,zero,84cc <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    84c0:	28800007 	ldb	r2,0(r5)
    84c4:	29400044 	addi	r5,r5,1
    84c8:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    84cc:	29fff936 	bltu	r5,r7,84b4 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    84d0:	3005883a 	mov	r2,r6
    84d4:	f800283a 	ret

000084d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    84d8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    84dc:	014666b4 	movhi	r5,6554
    84e0:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    84e4:	dc000015 	stw	r16,0(sp)
    84e8:	dfc00115 	stw	ra,4(sp)
    84ec:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    84f0:	00086d00 	call	86d0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    84f4:	10001126 	beq	r2,zero,853c <alt_busy_sleep+0x64>
    84f8:	0007883a 	mov	r3,zero
    84fc:	01200034 	movhi	r4,32768
    8500:	213fffc4 	addi	r4,r4,-1
    8504:	017999b4 	movhi	r5,58982
    8508:	295999c4 	addi	r5,r5,26215
    850c:	00000406 	br	8520 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8510:	213fffc4 	addi	r4,r4,-1
    8514:	203ffe1e 	bne	r4,zero,8510 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8518:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    851c:	18c00044 	addi	r3,r3,1
    8520:	18bffb16 	blt	r3,r2,8510 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8524:	8009883a 	mov	r4,r16
    8528:	01400144 	movi	r5,5
    852c:	00086e00 	call	86e0 <__mulsi3>
    8530:	10bfffc4 	addi	r2,r2,-1
    8534:	103ffe1e 	bne	r2,zero,8530 <alt_busy_sleep+0x58>
    8538:	00000506 	br	8550 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    853c:	8009883a 	mov	r4,r16
    8540:	01400144 	movi	r5,5
    8544:	00086e00 	call	86e0 <__mulsi3>
    8548:	10bfffc4 	addi	r2,r2,-1
    854c:	00bffe16 	blt	zero,r2,8548 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8550:	0005883a 	mov	r2,zero
    8554:	dfc00117 	ldw	ra,4(sp)
    8558:	dc000017 	ldw	r16,0(sp)
    855c:	dec00204 	addi	sp,sp,8
    8560:	f800283a 	ret

00008564 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8564:	f800283a 	ret

00008568 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8568:	f800283a 	ret

0000856c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    856c:	000170fa 	wrctl	ienable,zero
}
    8570:	f800283a 	ret

00008574 <strlen>:
    8574:	20800007 	ldb	r2,0(r4)
    8578:	10000526 	beq	r2,zero,8590 <strlen+0x1c>
    857c:	2007883a 	mov	r3,r4
    8580:	18c00044 	addi	r3,r3,1
    8584:	18800007 	ldb	r2,0(r3)
    8588:	103ffd1e 	bne	r2,zero,8580 <strlen+0xc>
    858c:	1905c83a 	sub	r2,r3,r4
    8590:	f800283a 	ret

00008594 <udivmodsi4>:
    8594:	29001b2e 	bgeu	r5,r4,8604 <udivmodsi4+0x70>
    8598:	28001a16 	blt	r5,zero,8604 <udivmodsi4+0x70>
    859c:	00800044 	movi	r2,1
    85a0:	0007883a 	mov	r3,zero
    85a4:	01c007c4 	movi	r7,31
    85a8:	00000306 	br	85b8 <udivmodsi4+0x24>
    85ac:	19c01326 	beq	r3,r7,85fc <udivmodsi4+0x68>
    85b0:	18c00044 	addi	r3,r3,1
    85b4:	28000416 	blt	r5,zero,85c8 <udivmodsi4+0x34>
    85b8:	294b883a 	add	r5,r5,r5
    85bc:	1085883a 	add	r2,r2,r2
    85c0:	293ffa36 	bltu	r5,r4,85ac <udivmodsi4+0x18>
    85c4:	10000d26 	beq	r2,zero,85fc <udivmodsi4+0x68>
    85c8:	0007883a 	mov	r3,zero
    85cc:	21400236 	bltu	r4,r5,85d8 <udivmodsi4+0x44>
    85d0:	2149c83a 	sub	r4,r4,r5
    85d4:	1886b03a 	or	r3,r3,r2
    85d8:	1004d07a 	srli	r2,r2,1
    85dc:	280ad07a 	srli	r5,r5,1
    85e0:	103ffa1e 	bne	r2,zero,85cc <udivmodsi4+0x38>
    85e4:	30000226 	beq	r6,zero,85f0 <udivmodsi4+0x5c>
    85e8:	2005883a 	mov	r2,r4
    85ec:	f800283a 	ret
    85f0:	1809883a 	mov	r4,r3
    85f4:	2005883a 	mov	r2,r4
    85f8:	f800283a 	ret
    85fc:	0007883a 	mov	r3,zero
    8600:	003ff806 	br	85e4 <udivmodsi4+0x50>
    8604:	00800044 	movi	r2,1
    8608:	0007883a 	mov	r3,zero
    860c:	003fef06 	br	85cc <udivmodsi4+0x38>

00008610 <__divsi3>:
    8610:	defffe04 	addi	sp,sp,-8
    8614:	dc000015 	stw	r16,0(sp)
    8618:	dfc00115 	stw	ra,4(sp)
    861c:	0021883a 	mov	r16,zero
    8620:	20000c16 	blt	r4,zero,8654 <__divsi3+0x44>
    8624:	000d883a 	mov	r6,zero
    8628:	28000e16 	blt	r5,zero,8664 <__divsi3+0x54>
    862c:	00085940 	call	8594 <udivmodsi4>
    8630:	1007883a 	mov	r3,r2
    8634:	8005003a 	cmpeq	r2,r16,zero
    8638:	1000011e 	bne	r2,zero,8640 <__divsi3+0x30>
    863c:	00c7c83a 	sub	r3,zero,r3
    8640:	1805883a 	mov	r2,r3
    8644:	dfc00117 	ldw	ra,4(sp)
    8648:	dc000017 	ldw	r16,0(sp)
    864c:	dec00204 	addi	sp,sp,8
    8650:	f800283a 	ret
    8654:	0109c83a 	sub	r4,zero,r4
    8658:	04000044 	movi	r16,1
    865c:	000d883a 	mov	r6,zero
    8660:	283ff20e 	bge	r5,zero,862c <__divsi3+0x1c>
    8664:	014bc83a 	sub	r5,zero,r5
    8668:	8021003a 	cmpeq	r16,r16,zero
    866c:	003fef06 	br	862c <__divsi3+0x1c>

00008670 <__modsi3>:
    8670:	deffff04 	addi	sp,sp,-4
    8674:	dfc00015 	stw	ra,0(sp)
    8678:	01800044 	movi	r6,1
    867c:	2807883a 	mov	r3,r5
    8680:	20000416 	blt	r4,zero,8694 <__modsi3+0x24>
    8684:	28000c16 	blt	r5,zero,86b8 <__modsi3+0x48>
    8688:	dfc00017 	ldw	ra,0(sp)
    868c:	dec00104 	addi	sp,sp,4
    8690:	00085941 	jmpi	8594 <udivmodsi4>
    8694:	0109c83a 	sub	r4,zero,r4
    8698:	28000b16 	blt	r5,zero,86c8 <__modsi3+0x58>
    869c:	180b883a 	mov	r5,r3
    86a0:	01800044 	movi	r6,1
    86a4:	00085940 	call	8594 <udivmodsi4>
    86a8:	0085c83a 	sub	r2,zero,r2
    86ac:	dfc00017 	ldw	ra,0(sp)
    86b0:	dec00104 	addi	sp,sp,4
    86b4:	f800283a 	ret
    86b8:	014bc83a 	sub	r5,zero,r5
    86bc:	dfc00017 	ldw	ra,0(sp)
    86c0:	dec00104 	addi	sp,sp,4
    86c4:	00085941 	jmpi	8594 <udivmodsi4>
    86c8:	0147c83a 	sub	r3,zero,r5
    86cc:	003ff306 	br	869c <__modsi3+0x2c>

000086d0 <__udivsi3>:
    86d0:	000d883a 	mov	r6,zero
    86d4:	00085941 	jmpi	8594 <udivmodsi4>

000086d8 <__umodsi3>:
    86d8:	01800044 	movi	r6,1
    86dc:	00085941 	jmpi	8594 <udivmodsi4>

000086e0 <__mulsi3>:
    86e0:	20000a26 	beq	r4,zero,870c <__mulsi3+0x2c>
    86e4:	0007883a 	mov	r3,zero
    86e8:	2080004c 	andi	r2,r4,1
    86ec:	1005003a 	cmpeq	r2,r2,zero
    86f0:	2008d07a 	srli	r4,r4,1
    86f4:	1000011e 	bne	r2,zero,86fc <__mulsi3+0x1c>
    86f8:	1947883a 	add	r3,r3,r5
    86fc:	294b883a 	add	r5,r5,r5
    8700:	203ff91e 	bne	r4,zero,86e8 <__mulsi3+0x8>
    8704:	1805883a 	mov	r2,r3
    8708:	f800283a 	ret
    870c:	0007883a 	mov	r3,zero
    8710:	1805883a 	mov	r2,r3
    8714:	f800283a 	ret
